# n8n on Render Environment Variables Template
# Copy this file to .env and fill in your values

# =====================================
# RENDER DEPLOYMENT CONFIGURATION
# =====================================

# Render API Key (get from https://dashboard.render.com/account/api-keys)
RENDER_API_KEY=your_render_api_key_here

# GitHub Repository for deployment (optional, for custom builds)
GITHUB_REPO=https://github.com/yourusername/n8n-render-deployment
GITHUB_BRANCH=main
GITHUB_TOKEN=your_github_token_here

# Render Service Configuration
RENDER_REGION=oregon
SERVICE_PLAN=starter
DATABASE_PLAN=starter

# =====================================
# N8N CORE CONFIGURATION
# =====================================

# Basic Authentication (REQUIRED for production)
N8N_BASIC_AUTH_ACTIVE=true
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=your_secure_password_here

# Encryption Key (CRITICAL - must be exactly 64 characters)
# Generate with: openssl rand -hex 32
N8N_ENCRYPTION_KEY=your_64_character_encryption_key_here

# Base URLs (will be auto-configured by deployment script)
WEBHOOK_URL=https://your-service-name.onrender.com
N8N_EDITOR_BASE_URL=https://your-service-name.onrender.com

# Network Configuration
N8N_PROTOCOL=https
N8N_PORT=5000
N8N_LISTEN_ADDRESS=0.0.0.0

# =====================================
# DATABASE CONFIGURATION
# =====================================

# Database Type (postgres or sqlite)
DB_TYPE=postgresdb

# PostgreSQL Configuration (for postgres deployment)
DB_POSTGRESDB_HOST=your_db_host
DB_POSTGRESDB_PORT=5432
DB_POSTGRESDB_DATABASE=n8n
DB_POSTGRESDB_USER=n8n_user
DB_POSTGRESDB_PASSWORD=your_db_password
DB_POSTGRESDB_POOL_SIZE=10

# SQLite Configuration (for disk deployment)
DB_SQLITE_DATABASE=/home/node/.n8n/database.sqlite
DB_SQLITE_VACUUM_ON_STARTUP=true
DB_SQLITE_ENABLE_WAL=true

# =====================================
# EXECUTION CONFIGURATION
# =====================================

# Execution Mode
EXECUTIONS_PROCESS=main
EXECUTIONS_MODE=regular

# Data Persistence
EXECUTIONS_DATA_SAVE_ON_ERROR=all
EXECUTIONS_DATA_SAVE_ON_SUCCESS=all

# Timeouts (in seconds)
EXECUTIONS_TIMEOUT=1200
EXECUTIONS_TIMEOUT_MAX=3600

# Concurrency (adjust based on your plan)
N8N_CONCURRENCY_PRODUCTION=5

# Data Cleanup (optional)
EXECUTIONS_DATA_PRUNE=true
EXECUTIONS_DATA_MAX_AGE=168

# =====================================
# SECURITY CONFIGURATION
# =====================================

# CORS (use with caution)
# N8N_CORS_ORIGIN=*

# Webhook Security
N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN=true

# =====================================
# LOGGING CONFIGURATION
# =====================================

# Log Level (debug, info, warn, error)
N8N_LOG_LEVEL=info
N8N_LOG_OUTPUT=console

# =====================================
# PERFORMANCE CONFIGURATION
# =====================================

# Node.js Memory Settings (adjust based on your plan)
NODE_OPTIONS=--max-old-space-size=1024

# =====================================
# FEATURE FLAGS
# =====================================

# Metrics Collection
N8N_METRICS=true
N8N_METRICS_PREFIX=n8n_

# Personalization (disable for production)
N8N_PERSONALIZATION_ENABLED=false
N8N_VERSION_NOTIFICATIONS_ENABLED=false
N8N_DIAGNOSTICS_ENABLED=false

# =====================================
# MONITORING CONFIGURATION
# =====================================

# Health Check Configuration
HEALTH_CHECK_INTERVAL=300
HEALTH_CHECK_TIMEOUT=10

# Metrics Database
METRICS_DB_PATH=/tmp/n8n_metrics.db

# Alert Configuration
ALERT_EMAIL_ENABLED=false
ALERT_EMAIL_SMTP_SERVER=smtp.gmail.com
ALERT_EMAIL_SMTP_PORT=587
ALERT_EMAIL_FROM=your-email@gmail.com
ALERT_EMAIL_TO=admin@example.com
ALERT_EMAIL_USERNAME=your-email@gmail.com
ALERT_EMAIL_PASSWORD=your_app_password

# =====================================
# DEVELOPMENT CONFIGURATION
# =====================================

# Environment
NODE_ENV=production

# Development Features (disable for production)
N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false

# =====================================
# EXTERNAL INTEGRATIONS
# =====================================

# Webhook Test URL (for testing webhooks locally)
# WEBHOOK_TEST_URL=https://webhook.site/your-unique-url

# External Services (add your API keys as needed)
# OPENAI_API_KEY=your_openai_api_key
# SLACK_BOT_TOKEN=xoxb-your-slack-bot-token
# DISCORD_BOT_TOKEN=your_discord_bot_token
# TELEGRAM_BOT_TOKEN=your_telegram_bot_token

# Cloud Storage (for file operations)
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key
# AWS_DEFAULT_REGION=us-east-1

# Google Services
# GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json

# =====================================
# BACKUP CONFIGURATION
# =====================================

# Backup Settings (for custom backup scripts)
BACKUP_ENABLED=false
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=30
BACKUP_S3_BUCKET=your-backup-bucket
BACKUP_S3_REGION=us-east-1

# =====================================
# CUSTOM NODE CONFIGURATION
# =====================================

# Custom Nodes Installation
# N8N_CUSTOM_NODES=n8n-nodes-salesforce,n8n-nodes-google-analytics

# Custom Node Development
# N8N_CUSTOM_EXTENSIONS=/home/node/.n8n/custom

# =====================================
# DEPLOYMENT NOTES
# =====================================

# IMPORTANT SECURITY NOTES:
# 1. Never commit this file with real values to version control
# 2. Generate strong passwords and encryption keys
# 3. Use environment variables in production, not .env files
# 4. Regularly rotate API keys and passwords
# 5. Monitor access logs for unauthorized access

# DEPLOYMENT CHECKLIST:
# [ ] Set strong N8N_BASIC_AUTH_PASSWORD
# [ ] Generate unique N8N_ENCRYPTION_KEY (exactly 64 characters)
# [ ] Configure WEBHOOK_URL and N8N_EDITOR_BASE_URL with your domain
# [ ] Set appropriate resource limits based on your plan
# [ ] Configure monitoring and alerting
# [ ] Set up backup strategy
# [ ] Test all webhooks and integrations

# RENDER-SPECIFIC NOTES:
# - Environment variables should be set in Render dashboard for security
# - Free tier services sleep after 15 minutes of inactivity
# - Database connections may have connection limits on free tier
# - Consider using paid plans for production workloads

# TROUBLESHOOTING:
# - Check service logs in Render dashboard
# - Verify all required environment variables are set
# - Test database connectivity separately
# - Monitor resource usage and scaling needs
# - Use health check endpoints for debugging

# SCALING CONSIDERATIONS:
# - Monitor CPU and memory usage
# - Consider upgrading plans before hitting limits
# - Use PostgreSQL for better scaling
# - Implement proper execution data cleanup
# - Monitor webhook response times

